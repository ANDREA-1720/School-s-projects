name: C/C++ CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install CMake (Linux/MacOS)
        if: runner.os != 'Windows'
        run: sudo apt-get install cmake -y || brew install cmake

      - name: Setup environment (Linux/MacOS)
        if: runner.os != 'Windows'
        run: |
          mkdir -p build
          for dir in */; do
            if [[ -f "$dir/main.cpp" ]]; then
              echo "Found $dir"
              mkdir -p build/$dir
            fi
          done

      - name: Setup environment (Windows)
        if: runner.os == 'Windows'
        run: |
          mkdir build
          Get-ChildItem -Directory | ForEach-Object {
            if (Test-Path "$($_.FullName)\main.cpp") {
              echo "Found $($_.Name)"
              mkdir "build\$($_.Name)"
            }
          }
        shell: pwsh

      - name: Build projects (Linux/MacOS)
        if: runner.os != 'Windows'
        run: |
          for dir in */; do
            if [[ -f "$dir/main.cpp" ]]; then
              echo "Compiling $dir"
              g++ "$dir/main.cpp" -o "build/$dir/${{ matrix.os }}-$(basename $dir)"
            fi
          done
        shell: bash

      - name: Build projects (Windows)
        if: runner.os == 'Windows'
        run: |
          Get-ChildItem -Directory | ForEach-Object {
            if (Test-Path "$($_.FullName)\main.cpp") {
              echo "Compiling $($_.Name)"
              cl "$($_.FullName)\main.cpp" /Fe:"build\$($_.Name)\${{ matrix.os }}-$($_.Name).exe"
            }
          }
        shell: pwsh

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Gather built executables
        run: |
          mkdir -p release
          for dir in build/*; do
            zip -j "release/$(basename $dir).zip" "$dir"/*
          done

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: release/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}